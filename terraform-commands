Install terraform
https://www.terraform.io/downloads

Add user in IAM to get the Access key ID and Secret access key - while creatin user, create a group and attach policy "AdministratorAccess"
create a directory
create a .tf file under the directory
terraform init - to initialize the terraform script and down load the required dependencies from the provider
terraform validate - to validate whether the code written s correct
terraform plan - dry run of ur script (infrastructure code), it actually shows, wat kind of resource blocks it s goin to update, change, create or delete.
terraform apply - to execute the plan 
terraform apply -auto-approve (you need not giv "Yes" after terraform apply)
terraform destroy - to delete the infrastructure

To secure Access key ID and Secret access key, we use AWS-CLI (Command Line Interface)
apt install awscli
aws configure
it wil ask for Access key ID, Secret access key, region.

terraform fmt - used to format the code in order
terraform destroy -target <resource_name.local_resource_name>
eg terraform destroy -target aws_instance.myec2
terrafrom target name - to delete a specific configaration like vpc, s3 bucket etc.
-----------------------------------------------------------------------------------------------------------
terrafrom console - used to check the terraform functions post which can be used in the configuration file.
https://www.terraform.io/language/functions
Eg 1 - 
max(5, 12, 9)
12
Eg 2 - 
min(5, 12, 9)
5
-------------------------------------------------------------------------------------------------
https://github.com/zealvora/terraform-beginner-to-advanced-resource
https://github.com/terraform-aws-modules/terraform-aws-ec2-instance - output.tf, ec2 in depth details
https://github.com/100daysofdevops/21_days_of_aws_using_terraform/blob/master/auto_scaling/main.tf
https://github.com/antonputra/tutorials/tree/main/lessons/038/terraform
https://github.com/HemantGangwar/terraformLearning/blob/master/automation/method1/ansible.cfg
---------------------------------------------------------------------------------------------------

Terraform (windows)
- download terraform binaries for windows (AMD 64)
- extract the data
- open the control panel
- select systems & security
- click systems
- to ur right, click on Advanced system Settings
- click on Enviromental variables
- select path 
- click on edit
- click on New, copy the extracted binary code path 
- okay 
-------------------------------------------------------------------------------------------------------

HTTPd - this code has to be given under the ec2 instance resource block
user_data = <<-EOF
      #!/bin/sh
      sudo apt-get update
      sudo apt install -y apache2
      sudo systemctl status apache2
      sudo systemctl start apache2
      sudo chown -R $USER:$USER /var/www/html
      sudo echo "<html><body><h1> Hello from instance $(hostname -f) </h1></body></html>" > /var/www/html/index.html
      EOF
 ----------------------------------------------------------------------------    - ---------------------------
 
 element function 
https://www.terraform.io/language/functions/element

element(list, index)

Examples
> element(["a", "b", "c"], 1)
b

> element(["a", "b", "c"], 3)
a

> element(["a", "b", "c"], length(["a", "b", "c"])-1)
c

Eg - real tym scenario
subnet_id  =  element (["subnet-0af349aec17ba628a", "subnet-0fd2e794c653f8545"], count.index)
 tags = {
    Name = element(["ALB_Test_Instance_1", "ALB_Test_Instance_2"], count.index)
  }
  
# Say suppose we are creatin 2 ec2 instances and need each instance to hav differnt subnet id. (
# instead of count.index, if you giv 0, it takes 1st subnet id for both instances and if you giv 1, it takes 2nd subnet id for both the instances. 
subnet_id  =  element (["subnet-0af349aec17ba628a", "subnet-0fd2e794c653f8545"], count.index)		- 1st case (it takes in order "subnet-0af349aec17ba628a" for 1st instance & "subnet-0fd2e794c653f8545" for 2nd instance)
subnet_id  =  element (["subnet-0af349aec17ba628a", "subnet-0fd2e794c653f8545"], 0) 		- 2st case (it takes "subnet-0af349aec17ba628a" for both the ec2 instance)
subnet_id  =  element (["subnet-0af349aec17ba628a", "subnet-0fd2e794c653f8545"], 1) 		- 3rd case (it takes "subnet-0fd2e794c653f8545" for both the ec2 instance)

----------------------------------------------------------------------------------------------------------------------------------------------------------

provider-versioning

Different Version Parameters used in video:
version    = "2.7"
version    = ">= 2.8"
version    = "<= 2.8"
version    = ">=2.10,<=2.30"

Base Configuration - provider.versioning.tf
provider "aws" {
  region     = "us-west-2"
  access_key = "YOUR-ACCESS-KEY"
  secret_key = "YOUR-SECRET-KEY"
  version    = ">=2.10,<=2.30"
}

resource "aws_instance" "myec2" {
   ami = "ami-082b5a644766e0e6f"
   instance_type = "t2.micro"
}

# to pass the lockfile use (.terraform.lock.hcl)
# terraform init -upgrade
# once the cmd s run the lockfile would be updated with the latest version.

---------------------------------------------------------------------------------------------
Note - Filters in Data Sources
If you need to find more details related to options that can be used in filters, you can refer to the following AWS documentation:

https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-instances.html

Refer to the --filters option
Note: This additional details is beyond the scope of certification.
====------------------------------------------------------------------------------------------------------------
Savings Terraform Plan To File
terraform plan -out=demopath (demopath s jus a file name, path and file name can be different dependin on the user)
terraform apply demopath
